{"version":3,"sources":["server.jsx"],"names":["global","navigator","app","server","http","createServer","io","use","express","static","path","join","__dirname","jsFile","process","env","NODE_ENV","config","files","client","out","outFile","ports","webpack","store","reducers","enemyChecklist","playerList","Map","enemyList","elist","srlPlayers","List","req","res","token","cookies","routes","request","location","url","error","redirectLocation","renderProps","console","log","redirect","pathname","search","status","send","content","ReactDOMServer","renderToString","JSON","stringify","getState","on","socket","action","broadcast","emit","listen","PORT"],"mappings":"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","file":"server.js","sourcesContent":["// @flow\n\n\nimport 'source-map-support/register';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Map, List } from 'immutable';\nimport { match, RouterContext } from 'react-router';\nimport { Provider } from 'react-redux';\nimport express from 'express';\nimport socketio from 'socket.io';\nimport path from 'path';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport http from 'http';\nimport request from 'request';\nimport cookieParser from 'cookie-parser';\n\nimport { socketMiddleware, connectStoreWithSocket } from './util/storeSockets';\nimport config from '../config';\nimport reducers from './reducers';\nimport routes from './util/routes';\n// import srl from './util/SRL';\n\nimport elist from './scripts/enemyList';\n\nglobal.navigator = { navigator: 'all' };\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketio(server);\n\napp.use('/assets/', express.static(path.join(__dirname, '../build/static')));\napp.use('/images/', express.static(path.join(__dirname, '../assets/images')));\napp.use('/fonts/', express.static(path.join(__dirname, '../assets/fonts')));\napp.use(cookieParser());\n\nlet jsFile;\nif (process.env.NODE_ENV === 'production') {\n  jsFile = `/assets/${config.files.client.out}/${config.files.client.outFile}`;\n} else {\n  jsFile = `http://localhost:${config.ports.webpack}/${config.files.client.out}/${config.files.client.outFile}`;\n}\n\nconst store = createStore(\n  reducers,\n  {\n    enemyChecklist: {\n      playerList: new Map(),\n      enemyList: new Map(elist),\n      srlPlayers: new List(),\n    },\n  },\n  applyMiddleware(socketMiddleware(io)), //, dbMiddleware)\n);\n\n// srl(store);\n\napp.use((req, res) => {\n  const token = req.cookies.token;\n\n  match(\n    { routes: routes(store, token, request), location: req.url },\n    (error, redirectLocation, renderProps) => {\n      if (redirectLocation) {\n        console.log('redirect')\n        res.redirect(302, redirectLocation.pathname + redirectLocation.search);\n      } else if (error) {\n        console.log(error);\n        res.status(500).send('An internal error has occurred');\n      } else if (!renderProps) {\n        res.status(404).send('Not Found');\n      } else {\n        const content = ReactDOMServer.renderToString(\n          <Provider store={store}>\n            <RouterContext {...renderProps} />\n          </Provider>\n        );\n        res.send(\n          `<html>\n            <head>\n              <link rel=\"stylesheet\" href=\"/assets/css/main.css\" />\n            </head>\n            <body>\n              <div id=\"react-root\">${content}</div>\n              <script>window.PRELOADED_STATE=${JSON.stringify(store.getState())};</script>\n              <script async defer src=\"${jsFile}\"></script>\n            </body>\n          </html>`\n        );\n      }\n    }\n  );\n});\n\nio.on('connection', socket => {\n  connectStoreWithSocket(store, socket);\n  socket.on('action', action => {\n    socket.broadcast.emit('action', action);\n  });\n});\n\nserver.listen(process.env.PORT || config.ports.express, () => {\n  console.log(`Listening on port ${config.ports.express}`);\n});\n"]}