{"version":3,"sources":["server.jsx"],"names":["global","navigator","app","server","createServer","io","use","static","join","__dirname","jsFile","process","env","NODE_ENV","files","client","out","outFile","ports","webpack","then","initialState","store","req","res","routes","location","url","error","redirectLocation","renderProps","redirect","pathname","search","console","log","status","send","content","renderToString","JSON","stringify","getState","on","socket","action","broadcast","emit","listen","PORT","express"],"mappings":"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","file":"server.js","sourcesContent":["// @flow\n\n\nimport 'source-map-support/register';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Map } from 'immutable';\nimport { match, RouterContext } from 'react-router';\nimport { Provider } from 'react-redux';\nimport express from 'express';\nimport socketio from 'socket.io';\nimport path from 'path';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport http from 'http';\n\nimport { socketMiddleware, connectStoreWithSocket } from './util/storeSockets';\nimport config from '../config';\nimport reducers from './reducers';\nimport routes from './util/routes';\nimport { getInitialState } from './util/db';\nimport dbMiddleware from './util/dbMiddleware';\nimport srl from './util/SRL';\n\nglobal.navigator = { navigator: 'all' };\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketio(server);\n\napp.use('/assets/', express.static(path.join(__dirname, '../build/static')));\napp.use('/images/', express.static(path.join(__dirname, '../assets/images')));\napp.use('/fonts/', express.static(path.join(__dirname, '../assets/fonts')));\n\nlet jsFile;\nif (process.env.NODE_ENV === 'production') {\n  jsFile = `/assets/${config.files.client.out}/${config.files.client.outFile}`;\n} else {\n  jsFile = `http://localhost:${config.ports.webpack}/${config.files.client.out}/${config.files.client.outFile}`;\n}\n\ngetInitialState().then(initialState => {\n  const store = createStore(\n    reducers,\n    initialState,\n    applyMiddleware(socketMiddleware(io), dbMiddleware)\n  );\n\n  srl(store);\n\n  app.use((req, res) => {\n    match(\n      { routes: routes(store), location: req.url },\n      (error, redirectLocation, renderProps) => {\n        if (redirectLocation) {\n          res.redirect(301, redirectLocation.pathname + redirectLocation.search);\n        } else if (error) {\n          console.log(error);\n          res.status(500).send('An internal error has occurred');\n        } else if (!renderProps) {\n          res.status(404).send('Not Found');\n        } else {\n          const content = ReactDOMServer.renderToString(\n            <Provider store={store}>\n              <RouterContext {...renderProps} />\n            </Provider>\n          );\n          res.send(\n            `<html>\n              <head>\n                <link rel=\"stylesheet\" href=\"/assets/css/main.css\" />\n              </head>\n              <body>\n                <div id=\"react-root\">${content}</div>\n                <script>window.PRELOADED_STATE = ${JSON.stringify(store.getState())}</script>\n                <script async defer src=\"${jsFile}\"></script>\n              </body>\n            </html>`\n          );\n        }\n      }\n    );\n  });\n\n  io.on('connection', socket => {\n    connectStoreWithSocket(store, socket);\n    socket.on('action', action => {\n      socket.broadcast.emit('action', action);\n    });\n  });\n\n  server.listen(process.env.PORT || config.ports.express, () => {\n    console.log(`Listening on port ${config.ports.express}`);\n  });\n});\n"]}