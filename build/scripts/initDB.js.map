{"version":3,"sources":["scripts/initDB.js"],"names":["sequelize","process","env","DB","DB_USER","DB_PASSWORD","host","DB_HOST","Player","define","name","STRING","Enemy","EnemyValue","number","INTEGER","value","EnemyCount","hasMany","as","hasOne","sync","findAll","then","enemies","enemy","getValues","order","values","console","log","map","v","join"],"mappings":";;AAAA;;;;AACA;;AAEA;;;;;;AAEA,MAAMA,YAAY,wBAChBC,QAAQC,GAAR,CAAYC,EADI,EAEhBF,QAAQC,GAAR,CAAYE,OAFI,EAGhBH,QAAQC,GAAR,CAAYG,WAHI,EAIhB;AACEC,QAAML,QAAQC,GAAR,CAAYK;AADpB,CAJgB,CAAlB;;AASA,MAAMC,SAASR,UAAUS,MAAV,CAAiB,QAAjB,EAA2B;AACxCC,QAAM,oBAAUC;AADwB,CAA3B,CAAf;;AAIA,MAAMC,QAAQZ,UAAUS,MAAV,CAAiB,OAAjB,EAA0B;AACtCC,QAAM,oBAAUC;AADsB,CAA1B,CAAd;;AAIA,MAAME,aAAab,UAAUS,MAAV,CAAiB,YAAjB,EAA+B;AAChDK,UAAQ,oBAAUC,OAD8B;AAEhDC,SAAO,oBAAUD;AAF+B,CAA/B,CAAnB;;AAKA,MAAME,aAAajB,UAAUS,MAAV,CAAiB,YAAjB,EAA+B;AAChDK,UAAQ,oBAAUC;AAD8B,CAA/B,CAAnB;;AAIAH,MAAMM,OAAN,CAAcL,UAAd,EAA0B,EAAEM,IAAI,QAAN,EAA1B;AACAF,WAAWG,MAAX,CAAkBR,KAAlB;AACAJ,OAAOU,OAAP,CAAeD,UAAf,EAA2B,EAAEE,IAAI,QAAN,EAA3B;;AAEAnB,UAAUqB,IAAV;;AAEAT,MAAMU,OAAN,GAAgBC,IAAhB,CAAqBC,WAAW;AAC9B,OAAK,MAAMC,KAAX,IAAoBD,OAApB,EAA6B;AAC3BC,UAAMC,SAAN,CAAgB,EAAEC,OAAO,QAAT,EAAhB,EAAqCJ,IAArC,CACEK,UAAU;AACRC,cAAQC,GAAR,CAAYF,MAAZ;AACAC,cAAQC,GAAR,CAAYL,MAAMf,IAAN,GAAa,KAAb,GAAqBkB,OAAOG,GAAP,CAAWC,KAAKA,EAAElB,MAAlB,EAA0BmB,IAA1B,CAA+B,IAA/B,CAArB,GAA4D,GAAxE;AACD,KAJH;AAMD;AACF,CATD;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"scripts/initDB.js","sourcesContent":["import Sequelize from 'sequelize';\nimport { List } from 'immutable';\n\nimport enemyList from './enemyList';\n\nconst sequelize = new Sequelize(\n  process.env.DB,\n  process.env.DB_USER,\n  process.env.DB_PASSWORD,\n  {\n    host: process.env.DB_HOST,\n  }\n);\n\nconst Player = sequelize.define('player', {\n  name: Sequelize.STRING,\n});\n\nconst Enemy = sequelize.define('enemy', {\n  name: Sequelize.STRING,\n});\n\nconst EnemyValue = sequelize.define('enemyValue', {\n  number: Sequelize.INTEGER,\n  value: Sequelize.INTEGER,\n});\n\nconst EnemyCount = sequelize.define('enemyCount', {\n  number: Sequelize.INTEGER,\n});\n\nEnemy.hasMany(EnemyValue, { as: 'values' });\nEnemyCount.hasOne(Enemy);\nPlayer.hasMany(EnemyCount, { as: 'counts' });\n\nsequelize.sync();\n\nEnemy.findAll().then(enemies => {\n  for (const enemy of enemies) {\n    enemy.getValues({ order: 'number' }).then(\n      values => {\n        console.log(values);\n        console.log(enemy.name + ': [' + values.map(v => v.number).join(', ') + ']');\n      }\n    )\n  }\n})\n//\n// const promises = [];\n//\n// for (let name of enemyList) {\n//   promises.push(Enemy.create({ name }).then(enemy => {\n//     const ps = [];\n//     for (let i = 0; i < 5; i++) {\n//       ps.push(enemy.createValue({ number: i, value: 5 - i }));\n//     }\n//     return Promise.all(ps);\n//   }));\n// }\n// Promise.all(promises).then(() => console.log('done'));\n"],"sourceRoot":"/source/"}