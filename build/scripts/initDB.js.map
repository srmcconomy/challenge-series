{"version":3,"sources":["scripts/initDB.js"],"names":["sequelize","sync","force","promises","Object","keys","map","name","value","enemy","Enemy","findOrCreate","where","set","save","Promise","all","init","process","env","DB","DB_USER","DB_PASSWORD","host","DB_HOST","logging","Player","define","STRING","INTEGER","PlayerEnemy","hasMany","belongsTo","then","console","log"],"mappings":";;;+BA6BA,aAAsB;AACpB,UAAMA,UAAUC,IAAV,CAAe,EAAEC,OAAO,IAAT,EAAf,CAAN;AACA,UAAMC,WAAWC,OAAOC,IAAP,sBAAuBC,GAAvB;AAAA,oCAA2B,WAAMC,IAAN,EAAc;AACxD,cAAMC,QAAQ,oBAAUD,IAAV,CAAd;AACA,cAAM,CAACE,KAAD,IAAU,MAAMC,MAAMC,YAAN,CAAmB;AACvCC,iBAAO,EAAEL,IAAF;AADgC,SAAnB,CAAtB;AAGAE,cAAMI,GAAN,CAAU,EAAEL,KAAF,EAAV;AACA,cAAMC,MAAMK,IAAN,EAAN;AACD,OAPgB;;AAAA;AAAA;AAAA;AAAA,SAAjB;AAQA,UAAMC,QAAQC,GAAR,CAAYb,QAAZ,CAAN;AACD,G;;kBAXcc,I;;;;;AA7Bf;;;;AACA;;AAEA;;;;;;;;AAEA,MAAMjB,YAAY,wBAChBkB,QAAQC,GAAR,CAAYC,EADI,EAEhBF,QAAQC,GAAR,CAAYE,OAFI,EAGhBH,QAAQC,GAAR,CAAYG,WAHI,EAIhB;AACEC,QAAML,QAAQC,GAAR,CAAYK,OADpB;AAEEC,WAAS;AAFX,CAJgB,CAAlB;;AAUA,MAAMC,SAAS1B,UAAU2B,MAAV,CAAiB,QAAjB,EAA2B;AACxCpB,QAAM,oBAAUqB;AADwB,CAA3B,CAAf;;AAIA,MAAMlB,QAAQV,UAAU2B,MAAV,CAAiB,OAAjB,EAA0B;AACtCpB,QAAM,oBAAUqB,MADsB;AAEtCpB,SAAO,oBAAUqB;AAFqB,CAA1B,CAAd;;AAKA,MAAMC,cAAc9B,UAAU2B,MAAV,CAAiB,aAAjB,CAApB;;AAEAD,OAAOK,OAAP,CAAeD,WAAf;AACAA,YAAYE,SAAZ,CAAsBtB,KAAtB;;AAeAO,OAAOgB,IAAP,CAAY,MAAMC,QAAQC,GAAR,CAAY,MAAZ,CAAlB","file":"initDB.js","sourcesContent":["import Sequelize from 'sequelize';\nimport { List } from 'immutable';\n\nimport enemyList from './enemyList';\n\nconst sequelize = new Sequelize(\n  process.env.DB,\n  process.env.DB_USER,\n  process.env.DB_PASSWORD,\n  {\n    host: process.env.DB_HOST,\n    logging: false,\n  }\n);\n\nconst Player = sequelize.define('Player', {\n  name: Sequelize.STRING,\n});\n\nconst Enemy = sequelize.define('Enemy', {\n  name: Sequelize.STRING,\n  value: Sequelize.INTEGER,\n});\n\nconst PlayerEnemy = sequelize.define('PlayerEnemy');\n\nPlayer.hasMany(PlayerEnemy);\nPlayerEnemy.belongsTo(Enemy);\n\nasync function init() {\n  await sequelize.sync({ force: true });\n  const promises = Object.keys(enemyList).map(async name => {\n    const value = enemyList[name];\n    const [enemy] = await Enemy.findOrCreate({\n      where: { name },\n    });\n    enemy.set({ value });\n    await enemy.save();\n  });\n  await Promise.all(promises);\n}\n\ninit().then(() => console.log('done'));\n"]}