{"version":3,"sources":["util/db.js"],"names":["setDefaultState","sequelize","process","env","DB","DB_USER","DB_PASSWORD","host","DB_HOST","Player","define","name","STRING","Enemy","EnemyValue","number","INTEGER","value","EnemyCount","hasMany","as","hasOne","sync","players","findAll","include","enemies","playerEnemyCount","Map","map","player","counts","count","enemy","enemyList","values","loadState"],"mappings":";;;;;;;;gCAwEO,aAAiC,CAEvC,C;;kBAFqBA,e;;;;;AAxEtB;;;;AACA;;;;;;AAEA,MAAMC,YAAY,wBAChBC,QAAQC,GAAR,CAAYC,EADI,EAEhBF,QAAQC,GAAR,CAAYE,OAFI,EAGhBH,QAAQC,GAAR,CAAYG,WAHI,EAIhB;AACEC,QAAML,QAAQC,GAAR,CAAYK;AADpB,CAJgB,CAAlB;;AASO,MAAMC,0BAASR,UAAUS,MAAV,CAAiB,QAAjB,EAA2B;AAC/CC,QAAM,oBAAUC;AAD+B,CAA3B,CAAf;;AAIA,MAAMC,wBAAQZ,UAAUS,MAAV,CAAiB,OAAjB,EAA0B;AAC7CC,QAAM,oBAAUC;AAD6B,CAA1B,CAAd;;AAIA,MAAME,kCAAab,UAAUS,MAAV,CAAiB,YAAjB,EAA+B;AACvDK,UAAQ,oBAAUC,OADqC;AAEvDC,SAAO,oBAAUD;AAFsC,CAA/B,CAAnB;;AAKA,MAAME,kCAAajB,UAAUS,MAAV,CAAiB,YAAjB,EAA+B;AACvDK,UAAQ,oBAAUC;AADqC,CAA/B,CAAnB;;AAIPH,MAAMM,OAAN,CAAcL,UAAd,EAA0B,EAAEM,IAAI,QAAN,EAA1B;AACAF,WAAWG,MAAX,CAAkBR,KAAlB;AACAJ,OAAOU,OAAP,CAAeD,UAAf,EAA2B,EAAEE,IAAI,QAAN,EAA3B;;AAEAnB,UAAUqB,IAAV;;;+BAEe,aAA2B;AACxC,UAAMC,UAAU,MAAMd,OAAOe,OAAP,CAAe;AACnCC,eAAS,CAAC,QAAD;AAD0B,KAAf,CAAtB;AAGA,UAAMC,UAAU,MAAMb,MAAMW,OAAN,CAAc;AAClCC,eAAS,CAAC,QAAD;AADyB,KAAd,CAAtB;AAGA,UAAME,mBAAmB,IAAIC,GAAJ,CACvBL,QAAQM,GAAR,CACE;AAAA,aAAU,CACRC,OAAOnB,IADC,EAER,IAAIiB,GAAJ,CACEE,OAAOC,MAAP,CAAcF,GAAd,CACE;AAAA,eAAS,CACPG,MAAMC,KAAN,CAAYtB,IADL,EAEPqB,MAAMjB,MAFC,CAAT;AAAA,OADF,CADF,CAFQ,CAAV;AAAA,KADF,CADuB,CAAzB;AAeA,UAAMmB,YAAY,IAAIN,GAAJ,CAChBF,QAAQG,GAAR,CACE;AAAA,aAAS,CACPI,MAAMtB,IADC,EAEP,oBACEsB,MAAME,MAAN,CAAaN,GAAb,CACE;AAAA,eAASZ,MAAMF,MAAf;AAAA,OADF,CADF,CAFO,CAAT;AAAA,KADF,CADgB,CAAlB;AAYA,WAAO,EAAEY,gBAAF,EAAoBO,SAApB,EAAP;AACD,G;;WAnC6BE,S;;;;SAAAA,S","file":"util/db.js","sourcesContent":["import Sequelize from 'sequelize';\nimport { List } from 'immutable';\n\nconst sequelize = new Sequelize(\n  process.env.DB,\n  process.env.DB_USER,\n  process.env.DB_PASSWORD,\n  {\n    host: process.env.DB_HOST,\n  }\n);\n\nexport const Player = sequelize.define('player', {\n  name: Sequelize.STRING,\n});\n\nexport const Enemy = sequelize.define('enemy', {\n  name: Sequelize.STRING,\n});\n\nexport const EnemyValue = sequelize.define('enemyValue', {\n  number: Sequelize.INTEGER,\n  value: Sequelize.INTEGER,\n});\n\nexport const EnemyCount = sequelize.define('enemyCount', {\n  number: Sequelize.INTEGER,\n});\n\nEnemy.hasMany(EnemyValue, { as: 'values' });\nEnemyCount.hasOne(Enemy);\nPlayer.hasMany(EnemyCount, { as: 'counts' });\n\nsequelize.sync();\n\nexport default async function loadState() {\n  const players = await Player.findAll({\n    include: ['counts'],\n  });\n  const enemies = await Enemy.findAll({\n    include: ['values'],\n  });\n  const playerEnemyCount = new Map(\n    players.map(\n      player => [\n        player.name,\n        new Map(\n          player.counts.map(\n            count => [\n              count.enemy.name,\n              count.number,\n            ]\n          )\n        ),\n      ]\n    )\n  );\n  const enemyList = new Map(\n    enemies.map(\n      enemy => [\n        enemy.name,\n        new List(\n          enemy.values.map(\n            value => value.number\n          )\n        ),\n      ]\n    )\n  );\n  return { playerEnemyCount, enemyList };\n}\n\nexport async function setDefaultState() {\n\n}\n"],"sourceRoot":"/source/"}